在产品定位上，Intel 将 Quark 定位于面向物联网、可穿戴设备的 x86 处理器，他的内部代号为 Clanton。

相比 Atom 系列处理器，Quark 差不多是 Atom 1/5 的尺寸，功耗也只有 Atom 的1/10 (2.2W)。
这估计也是叫做 Quark（夸克）的原因。

当然，作为减小尺寸、功耗、降低成本($5)的代价，Quark 的性能也弱很多。
它比较像是改良了制程，但阉割了 MMX 指令集的奔腾 I 代处理器.

从支持的指令集看，Quark 并不像其他 Atom 芯片那样支持 x64、MMX、SSE 等高级的指令集，但包含了浮点指令集(x87)。
虽然 Intel 的官方参数中提到 Quark 的指令集是与奔腾兼容的，但很明显，由于缺少了 MMX 指令这个作为奔腾处理器的重要标志，
实际上很多可以在奔腾 I CPU上运行的程序在 Quark 上可能是不能运行的。
这点算是一个遗憾，缺少 MMX、SSE 这类 SIMD 的指令集加速，
使得 Quark 在处理多媒体、图像运算、计算机视觉等算法上可能会表现的较差。

因此现在的程序只要不带有 MMX、SSE 指令，理论上是可以在 Quark 上运行的很好的。

在功耗方面，Quark 将 max TDP 控制在 2.2W。
对于采用 3.3V 供电而言，也就是最大需要提供 660mA 的电流。
这样的功耗相比其他 x86 CPU 而言已经小了很多，
但是我们对比同样主频等级的其他构架的处理器，
如 ARM、MIPS 构架的一些处理器，就会发现 Quark 的功耗还是相对偏高的。
如果要将 Quark 作为低功耗应用，Intel 为此还需要做更多的功课。


Galileo 上对外的 GPIO/PWM/ADC 接口并不是直接从 Quark 芯片中直接提供的，
而是采用了额外的芯片来实现，Quark CPU 与这些接口芯片再使用 SPI/I2C 进行连接。

位于 Intel Gaileo 主板上有块 8MByte 大小的 SPI Flash，其中保存了 Galileo 启动中的固件程序。
Galileo 采用了 UEFI，这块 Flash 芯片中包含了 UEFI 的固件程序用于 Galileo 初始化引导、
以及一个小型的 Linux 操作系统，用于运行用户通过 Arduino IDE 开发的程序并和 PC 完成互联。
为了方便用户 hack，Intel Galileo 也很友善的将这块 Flash 芯片的 SPI 接口引出，
用户可以不需要拆下 Flash 芯片，直接使用编程器对 Flash 芯片内的固件程序做修改和备份。
